---
import Layout from '../layouts/Layout.astro';
import SocialIcons from '../components/SocialIcons.astro';
---

<Layout title='Markdown to HTML Converter'>
    <link
        rel='stylesheet'
        href='https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css'
        integrity='sha384-DotA03Hj9wN1BA7nS200jTZE2yY29fMfa2I2P9iYI/2hJ2iG/L4Jk1w2NbCBljT8'
        crossorigin='anonymous'
    />
    <h1
        class='text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-200'
    >
        Markdown to HTML Converter
    </h1>

    <div class='bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8'>
        <label
            for='markdownFile'
            class='block w-full cursor-pointer p-8 text-center border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md hover:border-gray-400 dark:hover:border-gray-500 space-y-2'
        >
            <span
                class='block text-sm font-medium text-gray-700 dark:text-gray-300'
                >Upload a Markdown file (.md)</span
            >
            <span class='block text-gray-500 dark:text-gray-400 text-sm'
                >or drag and drop</span
            >
            <span class='block text-gray-500 dark:text-gray-400 text-xs mt-1'
                >(You can also paste a copied file)</span
            >
            <input
                type='file'
                id='markdownFile'
                accept='.md, .markdown'
                class='sr-only'
            />
        </label>
        <p
            id='errorMessage'
            class='text-red-500 text-sm mt-4 text-center hidden'
        >
        </p>
    </div>

    <div class='text-center my-4 text-gray-500 dark:text-gray-400'>OR</div>

    <div class='bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8'>
        <label
            for='markdownText'
            class='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 py-4'
        >
            Paste Markdown Text:
        </label>
        <textarea
            id='markdownText'
            rows='8'
            class='block w-full text-sm rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-4'
            placeholder='Enter Markdown here...'></textarea>
    </div>

    <div
        class='relative bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 min-h-[200px]'
    >
        <h2
            class='text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200'
        >
            HTML Output:
        </h2>
        <button
            id='copyButton'
            title='Copy HTML to clipboard'
            class='absolute top-6 right-6 p-1.5 rounded text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 hidden'
        >
            <svg
                xmlns='http://www.w3.org/2000/svg'
                class='h-5 w-5'
                fill='none'
                viewBox='0 0 24 24'
                stroke='currentColor'
                stroke-width='2'
            >
                <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    d='M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z'
                ></path>
            </svg>
            <span class='sr-only'>Copy HTML</span>
        </button>
        <div
            id='htmlOutput'
            class='prose dark:prose-invert max-w-none'
            aria-live='polite'
        >
            <p class='text-gray-500 dark:text-gray-400'>
                Upload a file to see the HTML output here.
            </p>
        </div>
    </div>

    <footer class='text-center mt-10 text-gray-500 dark:text-gray-400 text-sm'>
        Copyright Â© 2025 <a href='https://github.com/flnzba'>Florian Zeba</a>
        <SocialIcons />
    </footer>
</Layout>

<script>
    // Import marked library
    // Note: Astro automatically bundles npm packages used in client scripts
    import { Marked } from 'marked';
    import markedKatex from 'marked-katex-extension';

    const fileInput = document.getElementById(
        'markdownFile'
    ) as HTMLInputElement;
    const htmlOutput = document.getElementById('htmlOutput');
    const errorMessage = document.getElementById('errorMessage');
    const textareaInput = document.getElementById(
        'markdownText'
    ) as HTMLTextAreaElement;
    const copyButton = document.getElementById(
        'copyButton'
    ) as HTMLButtonElement;
    let copyTimeout: number | undefined;

    // Get the file input label for drag/drop events
    const fileInputLabel = fileInput?.closest('label');

    // --- Event Listeners ---
    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelect);
    }
    if (textareaInput) {
        textareaInput.addEventListener('input', handleTextInput);
    }
    if (copyButton) {
        copyButton.addEventListener('click', handleCopy);
    }
    if (fileInputLabel) {
        fileInputLabel.addEventListener('dragover', handleDragOver);
        fileInputLabel.addEventListener('dragleave', handleDragLeave);
        fileInputLabel.addEventListener('drop', handleDrop);
        fileInputLabel.addEventListener('paste', handlePaste);
    }

    // --- Pre-processing for LaTeX ---
    function preprocessLatex(markdown: string): string {
        // Process block-level equations
        markdown = markdown.replace(
            /\\\[([\s\S]*?)\\\]|\$\$([\s\S]*?)\$\$/g,
            (match, p1, p2) => {
                const content = p1 || p2;
                return `\n$$${content.trim()}$$\n`;
            }
        );

        // Process inline equations
        markdown = markdown.replace(/\\\(([\s\S]*?)\\\)/g, (match, p1) => {
            return `$${p1.trim()}$`;
        });

        return markdown;
    }

    // --- Core Conversion Logic ---
    async function convertMarkdown(markdownContent: string) {
        if (!htmlOutput || !copyButton) return;

        if (!markdownContent.trim()) {
            resetOutput();
            return;
        }

        try {
            const processedMarkdown = preprocessLatex(markdownContent);
            const markedInstance = new Marked();
            markedInstance.use(markedKatex({ throwOnError: false }));
            const htmlContent = await markedInstance.parse(processedMarkdown);
            htmlOutput.innerHTML = htmlContent;
            copyButton.classList.remove('hidden');
            hideError();
        } catch (error) {
            console.error('Error parsing Markdown:', error);
            showError('Could not parse the Markdown content.');
            htmlOutput.innerHTML =
                '<p class="text-gray-500 dark:text-gray-400">Error processing content.</p>';
            copyButton.classList.add('hidden');
        }
    }

    // --- Event Handlers ---
    function handleFileSelect(event: Event) {
        const target = event.target as HTMLInputElement;
        const file = target.files?.[0];

        if (!file) {
            showError('No file selected.');
            resetOutput();
            return;
        }

        if (
            !file.name.toLowerCase().endsWith('.md') &&
            !file.name.toLowerCase().endsWith('.markdown')
        ) {
            showError(
                'Please select a valid Markdown file (.md or .markdown).'
            );
            resetInputAndOutput(target);
            return;
        }

        if (textareaInput) {
            textareaInput.value = '';
        }
        hideError();

        const reader = new FileReader();

        reader.onload = async (e) => {
            const markdownContent = e.target?.result as string;
            if (markdownContent !== null && markdownContent !== undefined) {
                await convertMarkdown(markdownContent);
            } else {
                showError('Could not read the file content.');
                resetOutput();
            }
        };

        reader.onerror = () => {
            console.error('Error reading file:', reader.error);
            showError('Error reading the selected file.');
            resetInputAndOutput(target);
        };

        reader.readAsText(file);
    }

    function handleTextInput(event: Event) {
        const target = event.target as HTMLTextAreaElement;
        const markdownContent = target.value;

        if (fileInput) {
            fileInput.value = '';
        }

        convertMarkdown(markdownContent);
    }

    // --- Drag and Drop Handlers ---
    function handleDragOver(event: DragEvent) {
        event.preventDefault(); // Prevent default browser behavior
        event.stopPropagation();
        if (fileInputLabel) {
            fileInputLabel.classList.add(
                'border-blue-500',
                'bg-gray-50',
                'dark:bg-gray-700'
            ); // Visual feedback
        }
    }

    function handleDragLeave(event: DragEvent) {
        event.preventDefault();
        event.stopPropagation();
        if (fileInputLabel) {
            fileInputLabel.classList.remove(
                'border-blue-500',
                'bg-gray-50',
                'dark:bg-gray-700'
            ); // Remove visual feedback
        }
    }

    function handleDrop(event: DragEvent) {
        event.preventDefault();
        event.stopPropagation();
        if (fileInputLabel) {
            fileInputLabel.classList.remove(
                'border-blue-500',
                'bg-gray-50',
                'dark:bg-gray-700'
            ); // Remove visual feedback
        }

        const files = event.dataTransfer?.files;
        if (!files || files.length === 0) {
            showError('No file dropped.');
            resetOutput();
            return;
        }

        if (files.length > 1) {
            showError('Please drop only one file.');
            resetInputAndOutput(fileInput);
            return;
        }

        const file = files[0];

        if (
            !file.name.toLowerCase().endsWith('.md') &&
            !file.name.toLowerCase().endsWith('.markdown')
        ) {
            showError('Please drop a valid Markdown file (.md or .markdown).');
            resetInputAndOutput(fileInput);
            return;
        }

        // Clear file input in case a file was selected previously
        if (fileInput) {
            fileInput.value = '';
        }
        hideError();

        const reader = new FileReader();

        reader.onload = async (e) => {
            const markdownContent = e.target?.result as string;
            if (markdownContent !== null && markdownContent !== undefined) {
                if (textareaInput) {
                    textareaInput.value = markdownContent;
                    // Trigger input event to process the pasted content
                    textareaInput.dispatchEvent(
                        new Event('input', { bubbles: true })
                    );
                }
            } else {
                showError('Could not read the file content.');
                resetOutput();
            }
        };

        reader.onerror = () => {
            console.error('Error reading dropped file:', reader.error);
            showError('Error reading the dropped file.');
            resetInputAndOutput(fileInput);
        };

        reader.readAsText(file);
    }

    // --- Paste Handler ---
    function handlePaste(event: ClipboardEvent) {
        event.preventDefault();
        event.stopPropagation();

        const items = event.clipboardData?.items;
        if (!items) {
            // Handle cases where clipboard data might not be accessible
            // Or just ignore if no items
            return;
        }

        let file: File | null = null;
        for (let i = 0; i < items.length; i++) {
            if (items[i].kind === 'file') {
                file = items[i].getAsFile();
                break; // Process only the first file found
            }
        }

        if (!file) {
            // If no file was pasted, maybe it was text?
            // Let the default textarea paste handle it, or show a specific message?
            // For now, we'll just ignore non-file pastes in this handler.
            // We could potentially try reading text here too if desired:
            // const text = event.clipboardData?.getData('text/plain');
            // if (text && textareaInput) { textareaInput.value = text; ... }
            return;
        }

        if (
            !file.name.toLowerCase().endsWith('.md') &&
            !file.name.toLowerCase().endsWith('.markdown')
        ) {
            showError('Please paste a valid Markdown file (.md or .markdown).');
            resetInputAndOutput(fileInput);
            return;
        }

        // Clear file input in case a file was selected/dropped previously
        if (fileInput) {
            fileInput.value = '';
        }
        hideError();

        const reader = new FileReader();

        reader.onload = async (e) => {
            const markdownContent = e.target?.result as string;
            if (markdownContent !== null && markdownContent !== undefined) {
                if (textareaInput) {
                    textareaInput.value = markdownContent;
                    // Trigger input event to process the pasted content
                    textareaInput.dispatchEvent(
                        new Event('input', { bubbles: true })
                    );
                }
            } else {
                showError('Could not read the pasted file content.');
                resetOutput();
            }
        };

        reader.onerror = () => {
            console.error('Error reading pasted file:', reader.error);
            showError('Error reading the pasted file.');
            resetInputAndOutput(fileInput);
        };

        reader.readAsText(file);
    }

    // --- Copy Handler ---
    async function handleCopy() {
        if (!htmlOutput || !copyButton) return;

        const textToCopy = htmlOutput.innerText;
        const originalButtonContent = copyButton.innerHTML;

        try {
            await navigator.clipboard.writeText(textToCopy);

            copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                </svg>
                <span class="sr-only">Copied!</span>
            `;
            copyButton.title = 'Copied!';

            if (copyTimeout) clearTimeout(copyTimeout);

            copyTimeout = window.setTimeout(() => {
                copyButton.innerHTML = originalButtonContent;
                copyButton.title = 'Copy HTML to clipboard';
            }, 2000);
        } catch (err) {
            console.error('Failed to copy text: ', err);
            copyButton.title = 'Copy failed';
            if (copyTimeout) clearTimeout(copyTimeout);
            copyTimeout = window.setTimeout(() => {
                copyButton.innerHTML = originalButtonContent;
                copyButton.title = 'Copy HTML to clipboard';
            }, 1500);
        }
    }

    // --- UI Helper Functions ---
    function showError(message: string) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }
    }

    function hideError() {
        if (errorMessage) {
            errorMessage.textContent = '';
            errorMessage.classList.add('hidden');
        }
    }

    function resetOutput() {
        if (htmlOutput) {
            htmlOutput.innerHTML =
                '<p class="text-gray-500 dark:text-gray-400">Enter Markdown text or upload a file to see the HTML output here.</p>';
        }
        if (copyButton) {
            copyButton.classList.add('hidden');
            copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                <span class="sr-only">Copy HTML</span>
            `;
            copyButton.title = 'Copy HTML to clipboard';
        }
    }

    function resetInputAndOutput(fileInputTarget?: HTMLInputElement) {
        if (fileInputTarget) {
            fileInputTarget.value = '';
        }
        if (textareaInput) {
            textareaInput.value = '';
        }
        resetOutput();
        hideError();
    }
</script>
